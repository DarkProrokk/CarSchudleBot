"""add intervalgroup table for relation general interval and add group_id in intervals

Revision ID: 5d3333799939
Revises: 2d15823972a4
Create Date: 2024-03-26 09:52:33.903417

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5d3333799939'
down_revision: Union[str, None] = '2d15823972a4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('intervalgroup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('schedules')
    op.add_column('intervals', sa.Column('group_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'intervals', 'intervalgroup', ['group_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'intervals', type_='foreignkey')
    op.drop_column('intervals', 'group_id')
    op.create_table('schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='schedules_pkey')
    )
    op.drop_table('intervalgroup')
    # ### end Alembic commands ###
